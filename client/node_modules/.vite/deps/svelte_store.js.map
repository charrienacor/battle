{
  "version": 3,
  "sources": ["../../../../node_modules/svelte/src/store/index-client.js"],
  "sourcesContent": ["/** @import { Readable, Writable } from './public.js' */\r\nimport { noop } from '../internal/shared/utils.js';\r\nimport {\r\n\teffect_root,\r\n\teffect_tracking,\r\n\trender_effect\r\n} from '../internal/client/reactivity/effects.js';\r\nimport { source } from '../internal/client/reactivity/sources.js';\r\nimport { get as get_source, tick } from '../internal/client/runtime.js';\r\nimport { increment } from '../reactivity/utils.js';\r\nimport { get, writable } from './shared/index.js';\r\n\r\nexport { derived, get, readable, readonly, writable } from './shared/index.js';\r\n\r\n/**\r\n * @template V\r\n * @overload\r\n * @param {() => V} get\r\n * @param {(v: V) => void} set\r\n * @returns {Writable<V>}\r\n */\r\n/**\r\n * @template V\r\n * @overload\r\n * @param {() => V} get\r\n * @returns {Readable<V>}\r\n */\r\n/**\r\n * Create a store from a function that returns state, and (to make a writable store), an\r\n * optional second function that sets state.\r\n *\r\n * ```ts\r\n * import { toStore } from 'svelte/store';\r\n *\r\n * let count = $state(0);\r\n *\r\n * const store = toStore(() => count, (v) => (count = v));\r\n * ```\r\n * @template V\r\n * @param {() => V} get\r\n * @param {(v: V) => void} [set]\r\n * @returns {Writable<V> | Readable<V>}\r\n */\r\nexport function toStore(get, set) {\r\n\tlet init_value = get();\r\n\tconst store = writable(init_value, (set) => {\r\n\t\t// If the value has changed before we call subscribe, then\r\n\t\t// we need to treat the value as already having run\r\n\t\tlet ran = init_value !== get();\r\n\r\n\t\t// TODO do we need a different implementation on the server?\r\n\t\tconst teardown = effect_root(() => {\r\n\t\t\trender_effect(() => {\r\n\t\t\t\tconst value = get();\r\n\t\t\t\tif (ran) set(value);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tran = true;\r\n\r\n\t\treturn teardown;\r\n\t});\r\n\r\n\tif (set) {\r\n\t\treturn {\r\n\t\t\tset,\r\n\t\t\tupdate: (fn) => set(fn(get())),\r\n\t\t\tsubscribe: store.subscribe\r\n\t\t};\r\n\t}\r\n\r\n\treturn {\r\n\t\tsubscribe: store.subscribe\r\n\t};\r\n}\r\n\r\n/**\r\n * @template V\r\n * @overload\r\n * @param {Writable<V>} store\r\n * @returns {{ current: V }}\r\n */\r\n/**\r\n * @template V\r\n * @overload\r\n * @param {Readable<V>} store\r\n * @returns {{ readonly current: V }}\r\n */\r\n/**\r\n * Convert a store to an object with a reactive `current` property. If `store`\r\n * is a readable store, `current` will be a readonly property.\r\n *\r\n * ```ts\r\n * import { fromStore, get, writable } from 'svelte/store';\r\n *\r\n * const store = writable(0);\r\n *\r\n * const count = fromStore(store);\r\n *\r\n * count.current; // 0;\r\n * store.set(1);\r\n * count.current; // 1\r\n *\r\n * count.current += 1;\r\n * get(store); // 2\r\n * ```\r\n * @template V\r\n * @param {Writable<V> | Readable<V>} store\r\n */\r\nexport function fromStore(store) {\r\n\tlet value = /** @type {V} */ (undefined);\r\n\tlet version = source(0);\r\n\tlet subscribers = 0;\r\n\r\n\tlet unsubscribe = noop;\r\n\r\n\tfunction current() {\r\n\t\tif (effect_tracking()) {\r\n\t\t\tget_source(version);\r\n\r\n\t\t\trender_effect(() => {\r\n\t\t\t\tif (subscribers === 0) {\r\n\t\t\t\t\tlet ran = false;\r\n\r\n\t\t\t\t\tunsubscribe = store.subscribe((v) => {\r\n\t\t\t\t\t\tvalue = v;\r\n\t\t\t\t\t\tif (ran) increment(version);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tran = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsubscribers += 1;\r\n\r\n\t\t\t\treturn () => {\r\n\t\t\t\t\ttick().then(() => {\r\n\t\t\t\t\t\t// Only count down after timeout, else we would reach 0 before our own render effect reruns,\r\n\t\t\t\t\t\t// but reach 1 again when the tick callback of the prior teardown runs. That would mean we\r\n\t\t\t\t\t\t// re-subcribe unnecessarily and create a memory leak because the old subscription is never cleaned up.\r\n\t\t\t\t\t\tsubscribers -= 1;\r\n\r\n\t\t\t\t\t\tif (subscribers === 0) {\r\n\t\t\t\t\t\t\tunsubscribe();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\t\t\t});\r\n\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\treturn get(store);\r\n\t}\r\n\r\n\tif ('set' in store) {\r\n\t\treturn {\r\n\t\t\tget current() {\r\n\t\t\t\treturn current();\r\n\t\t\t},\r\n\t\t\tset current(v) {\r\n\t\t\t\tstore.set(v);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\treturn {\r\n\t\tget current() {\r\n\t\t\treturn current();\r\n\t\t}\r\n\t};\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AA2CO,SAAS,QAAQA,MAAK,KAAK;AACjC,MAAI,aAAaA,KAAI;AACrB,QAAM,QAAQ,SAAS,YAAY,CAACC,SAAQ;AAG3C,QAAI,MAAM,eAAeD,KAAI;AAG7B,UAAM,WAAW,YAAY,MAAM;AAClC,oBAAc,MAAM;AACnB,cAAM,QAAQA,KAAI;AAClB,YAAI,IAAK,CAAAC,KAAI,KAAK;AAAA,MACnB,CAAC;AAAA,IACF,CAAC;AAED,UAAM;AAEN,WAAO;AAAA,EACR,CAAC;AAED,MAAI,KAAK;AACR,WAAO;AAAA,MACN;AAAA,MACA,QAAQ,CAAC,OAAO,IAAI,GAAGD,KAAI,CAAC,CAAC;AAAA,MAC7B,WAAW,MAAM;AAAA,IAClB;AAAA,EACD;AAEA,SAAO;AAAA,IACN,WAAW,MAAM;AAAA,EAClB;AACD;AAmCO,SAAS,UAAU,OAAO;AAChC,MAAI;AAAA;AAAA,IAA0B;AAAA;AAC9B,MAAI,UAAU,OAAO,CAAC;AACtB,MAAI,cAAc;AAElB,MAAI,cAAc;AAElB,WAAS,UAAU;AAClB,QAAI,gBAAgB,GAAG;AACtB,UAAW,OAAO;AAElB,oBAAc,MAAM;AACnB,YAAI,gBAAgB,GAAG;AACtB,cAAI,MAAM;AAEV,wBAAc,MAAM,UAAU,CAAC,MAAM;AACpC,oBAAQ;AACR,gBAAI,IAAK,WAAU,OAAO;AAAA,UAC3B,CAAC;AAED,gBAAM;AAAA,QACP;AAEA,uBAAe;AAEf,eAAO,MAAM;AACZ,eAAK,EAAE,KAAK,MAAM;AAIjB,2BAAe;AAEf,gBAAI,gBAAgB,GAAG;AACtB,0BAAY;AAAA,YACb;AAAA,UACD,CAAC;AAAA,QACF;AAAA,MACD,CAAC;AAED,aAAO;AAAA,IACR;AAEA,WAAOA,KAAI,KAAK;AAAA,EACjB;AAEA,MAAI,SAAS,OAAO;AACnB,WAAO;AAAA,MACN,IAAI,UAAU;AACb,eAAO,QAAQ;AAAA,MAChB;AAAA,MACA,IAAI,QAAQ,GAAG;AACd,cAAM,IAAI,CAAC;AAAA,MACZ;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AAAA,IACN,IAAI,UAAU;AACb,aAAO,QAAQ;AAAA,IAChB;AAAA,EACD;AACD;",
  "names": ["get", "set"]
}
